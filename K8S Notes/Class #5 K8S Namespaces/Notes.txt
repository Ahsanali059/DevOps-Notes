==============
K8S Namespaces 
==============

-> Namespaces are equal to packages in the Java.
-> Namespaces are used to grouped our K8S Components logically.
-> We can create multiple namespaces in k8s cluster.
   ex: spring-web-app-ns,spring-web-app-db-ns 

-> Namespaces are logically isolated with each other.
Note: when we delete namespace all the components created under that namespace will be deleted.

------------------------------------------------------------------------------------------
=> We can get K8S namespaces using below command
$  kubectl get ns 
       OR 
   kubectl get namespace

=> In K8S we will have below namespaces by default
      
      1) default
      2) kube-public
      3) kube-system
      4) kube-node-lease

Note: When we create k8s component without using namespace then k8s will consider 'default'
namespace for that.

-> kube-public, kube-system and kube-node-lease namespaces will be used by k8s cluster. We
should not create our k8s components in these namespaces.

# Command to get k8s Components
$ kubectl get all

# Get k8s components of given namespace
$ kubectl get all -n <namespace-name>
  Ex. kubectl get all -n kube-system

*********IMPORTANT NOTE********
-> It is highly recommended to create our k8s components under custom namespace

-> We Can create namespace in two ways 
   -> using command 
   -> using manifest.yml

# create namespace
$ kubectl create ns spring_apps_namespace

================================
Manifest yml to create namespace
================================

---
apiVersion: v1
kind: Namespace
metadata:
   name: spring_apps_namespace
... 

$ kubectl apply -f <manifest.yml>

# delete namespace
$ kubectl delete ns spring_apps_namespace

# delete everything that is created inside default namespace
$ kubectl delete all --all 

# get pods that is present inside specific namespace
$ kubectl get pods -n spring_apps_namespace

# get everything that is present inside specific namespace
$ kubectl get all -n spring_apps_namespace

# get all services 
$ kubectl get svc -n spring_apps_namespace

# get logs of the pod 
$ kubectl logs <pod-name> -n spring_apps_namespace

# delete namespace 
$ kubectl delete ns spring_apps_namespace

======================================================|
Create POD and Service in a Single file with namespace|
======================================================|
---
apiVersion: v1
kind:Namespace
metadata:
   name:spring_apps_namespace
---
apiVersion:v1
kind: Pod
metadata:
    name:javawebapppod
    namespace: spring_apps_namespace
    labels:
       app:javawebapp # very Important
spec:
   containers:
    - name: javawebappcontainer
      image:ahsan/javawebapp
      ports:
         - containerPort:8080

---
apiVersion: v1
kind:Service
metadata:
   name: javawebappsvc
   namespace:spring_apps_namespace
spec:
   type: NodePort
   selector:
       app:javawebapp # POD Label  
   ports:
       - port: 80
         targetPort: 8080
         nodePort: 30785
...

# get pods that is created inside spring_apps_namespace
$ kubectl get pods -n spring_apps_namespace

# check logs of the pods
$ kubectl logs javawebapp
