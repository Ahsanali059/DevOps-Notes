================================
Stateful VS Stateless Containers
================================

Stateless Container : Data will be deleted after container got deleted

Stateful Container : Data will me maintained permanently

Note: Docker Containers are stateless container(by default)

Note: In above spring boot applications we are using mysql db to store the data.when we recreate
containers we lost our data (This is not accepted in realtime).

=> Even if we deploy latest code or if we recreate containers we should loose our data.
=> To maintain data permanently we need to make our container as Stateful Container.
=> To make container as Stateful,We need to use "Docker Volumes" Concept. 

==============
Docker Volumes
==============

*) Docker Volumes are used to persist the data which is generated by Docker container.
*) Volumes are used to avoid data loss.
*) Using Volumes we can container as Stateful container

*) We have 3 types of Volumes in Docker.
   
           1) Anonymous Volume (No name)
           2) Named Volume
           3) Bind Mounts

# To check all volumes
$ docker volume ls

# Create docker volume
$ docker volume create spring-boot-volume 

# Inspect docker volume
$ docker volume inspect <vol-name>

# Remove Docker Volume
$ docker volume rm <vol-name>

# Remove all volumes
$ docker system prune --volumes

------------------------------------------------------------------------------------------
How to save container data ? 

Step 1. Define a Named Volume
# In your docker-compose.yml, declare a volume under the volumes: section:

volumes:
  db_data:

Step 2. Mount the Volume to MySQL
# Attach the volume to the MySQL container to store its data:

services:
  mysql:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: mydb
      MYSQL_USER: user
      MYSQL_PASSWORD: password
    ports:
      - "3306:3306"
    volumes:
      - db_data:/var/lib/mysql

Note: This mounts the db_data volume to MySQLâ€™s data directory, ensuring all database files are stored persistently.

Step 3. Spring Boot Configuration
# Your Spring Boot app should connect to MySQL using the container name as the host:
spring.datasource.url=jdbc:mysql://mysql:3306/mydb
spring.datasource.username=user
spring.datasource.password=password
spring.jpa.hibernate.ddl-auto=update

